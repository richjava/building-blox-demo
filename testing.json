{
    "options": {
        "template": "src/templates/pages/features/features.njk",
        "filename": "features/page-1/index.html",
        "hash": false,
        "inject": true,
        "compile": true,
        "favicon": false,
        "minify": false,
        "cache": true,
        "showErrors": true,
        "chunks": "all",
        "excludeChunks": [],
        "chunksSortMode": "auto",
        "meta": {},
        "title": "Webpack App",
        "xhtml": false,
        "blox": {
            "db": {
                "features": {
                    "items": [
                        {
                            "id": "5d2718bd3f2b6f0718952e4f",
                            "slug": "modular-architecture",
                            "status": "published",
                            "createdAt": "2019-07-11T11:08:45.025Z",
                            "updatedAt": "2019-07-12T03:20:54.269Z",
                            "title": "Modular architecture",
                            "fields": {
                                "title": "Modular architecture",
                                "body": "<p>Jen Starter uses a combination of industry standard technologies to create modular, reusable components.</p><h2>Templating</h2><p>Through the use of template inheritance, we can create child HTML components. In addition to this, we can also use include blocks of HTML into a scope, and this is used in Jen Starter for layout components.</p><h2>Modular CSS</h2><p><span style=\"color: rgba(0, 0, 0, 0.84);\">One of the benefits of CSS-in-JS is that it abstracts the CSS model to the component level, rather than the document level. In Jen Starter, modularity of styles is achieved by placing Sass files at component level. CSS won't be scoped to the page as is with CSS-in-JS, but BEM naming is used instead to enforce scoping.</span></p><h2><span style=\"color: rgba(0, 0, 0, 0.84);\">Modular Javascript</span></h2><p>You don't need to write any Javascript for Jen Starter to work, but if you do want to use it you can choose to use it globally or at a component level.</p>",
                                "image": {
                                    "url": "https://s3-ap-southeast-2.amazonaws.com/com.appyay/e/5d2715de3f2b6f0718952e4a/a/5d27fc6c3f2b6f0718952e60/w420",
                                    "baseUrl": "https://s3-ap-southeast-2.amazonaws.com/com.appyay/e/5d2715de3f2b6f0718952e4a/a/5d27fc6c3f2b6f0718952e60",
                                    "originalWidth": 420,
                                    "sizes": {
                                        "w150": "https://s3-ap-southeast-2.amazonaws.com/com.appyay/e/5d2715de3f2b6f0718952e4a/a/5d27fc6c3f2b6f0718952e60/w150",
                                        "w420": "https://s3-ap-southeast-2.amazonaws.com/com.appyay/e/5d2715de3f2b6f0718952e4a/a/5d27fc6c3f2b6f0718952e60/w420"
                                    }
                                }
                            }
                        },
                        {
                            "id": "5d2718bd3f2b6f0718952e50",
                            "slug": "easily-customizable",
                            "status": "published",
                            "createdAt": "2019-07-11T11:08:45.044Z",
                            "updatedAt": "2019-07-12T08:54:22.193Z",
                            "title": "Easily customizable",
                            "fields": {
                                "title": "Easily customizable",
                                "body":"<p>Jen starter comes with a common set of tasks to run for development and optimize for production, but these tasks can be changed or removed to suit your needs and new tasks can be plugged in easily.</p><p>Jen is built on top of Gulp.js, a steaming build system popular for its simplicity and huge ecosystem of plugins. Here's an example of how Gulp task that gets images from the<em> src</em> directory and pipes them to the <em>public</em> directory:</p><pre class=\"ql-syntax\" spellcheck=\"false\">gulp.task('images', function() {\n  return gulp.src(['src/assets/images/**/*.{gif,jpg,png,svg}'])\n     
 .pipe(gulp.dest('public/images'));\n
                            });\n</pre><p>The Jen library only requires two things: Gulp 
for the build system and Nunjucks for templating. The rest is up to the developer.</p>","image":{"url":"https: //s3-ap-southeast-2.amazonaws.com/com.appyay/e/5d2715de3f2b6f0718952e4a/a/5d284abd3f2b6f0718952e65/w420","baseUrl":"https://s3-ap-southeast-2.amazonaws.com/com.appyay/e/5d2715de3f2b6f0718952e4a/a/5d284abd3f2b6f0718952e65","originalWidth":512,"sizes":{"w150":"https://s3-ap-southeast-2.amazonaws.com/com.appyay/e/5d2715de3f2b6f0718952e4a/a/5d284abd3f2b6f0718952e65/w150","w420":"https://s3-ap-southeast-2.amazonaws.com/com.appyay/e/5d2715de3f2b6f0718952e4a/a/5d284abd3f2b6f0718952e65/w420"}}}},{"id":"5d2718bd3f2b6f0718952e51","slug":"built-for-rapid-development","status":"published","createdAt":"2019-07-11T11:08:45.049Z","updatedAt":"2019-07-12T03:19:15.860Z","title":"Built for rapid development","fields":{"title":"Built for rapid development","body":"<p>Jen makes it 
simple to take an HTML template and convert it into a dynamic data-driven static website. In fact, it will work out of the box if you copy and paste the HTML, CSS and Javascript into the right places. There is no CSS-in-JS to deal with!</p>","image":{"url":"https: //s3-ap-southeast-2.amazonaws.com/com.appyay/e/5d2715de3f2b6f0718952e4a/a/5d27fc333f2b6f0718952e5b/w420","baseUrl":"https://s3-ap-southeast-2.amazonaws.com/com.appyay/e/5d2715de3f2b6f0718952e4a/a/5d27fc333f2b6f0718952e5b","originalWidth":512,"sizes":{"w150":"https://s3-ap-southeast-2.amazonaws.com/com.appyay/e/5d2715de3f2b6f0718952e4a/a/5d27fc333f2b6f0718952e5b/w150","w420":"https://s3-ap-southeast-2.amazonaws.com/com.appyay/e/5d2715de3f2b6f0718952e4a/a/5d27fc333f2b6f0718952e5b/w420"}}}}],"contentType":{"id":"5d2718bc3f2b6f0718952e4e","name":"Feature","pluralName":"Features","description":"Features of the App.","environment":"5d2715de3f2b6f0718952e4a","category":"entity","createdAt":"2019-07-11T11:08:44.997Z","updatedAt":"2019-07-11T11:08:45.056Z"}},"reviews":{"items":[{"id":"5d2718bd3f2b6f0718952e53","slug":"review-1","status":"published","createdAt":"2019-07-11T11:08:45.069Z","updatedAt":"2019-11-09T13:01:57.402Z","title":"OK, now we're talking","fields":{"quote":"OK, now we're talking","reviewerName":"Julie Moore","image":{"url":"https://s3-ap-southeast-2.amazonaws.com/com.appyay/e/5d2715de3f2b6f0718952e4a/a/5dc6b8c430fd4c22394277bc/w420","baseUrl":"https://s3-ap-southeast-2.amazonaws.com/com.appyay/e/5d2715de3f2b6f0718952e4a/a/5dc6b8c430fd4c22394277bc","originalWidth":502,"sizes":{"w150":"https://s3-ap-southeast-2.amazonaws.com/com.appyay/e/5d2715de3f2b6f0718952e4a/a/5dc6b8c430fd4c22394277bc/w150","w420":"https://s3-ap-southeast-2.amazonaws.com/com.appyay/e/5d2715de3f2b6f0718952e4a/a/5dc6b8c430fd4c22394277bc/w420"}}}},{"id":"5d2718bd3f2b6f0718952e54","slug":"review-2","status":"published","createdAt":"2019-07-11T11:08:45.072Z","updatedAt":"2019-11-09T13:03:48.371Z","title":"This seriously rocks","fields":{"quote":"This seriously rocks","reviewerName":"Mary Smith","image":{"url":"https://s3-ap-southeast-2.amazonaws.com/com.appyay/e/5d2715de3f2b6f0718952e4a/a/5dc6b93330fd4c22394277c1/w420","baseUrl":"https://s3-ap-southeast-2.amazonaws.com/com.appyay/e/5d2715de3f2b6f0718952e4a/a/5dc6b93330fd4c22394277c1","originalWidth":468,"sizes":{"w150":"https://s3-ap-southeast-2.amazonaws.com/com.appyay/e/5d2715de3f2b6f0718952e4a/a/5dc6b93330fd4c22394277c1/w150","w420":"https://s3-ap-southeast-2.amazonaws.com/com.appyay/e/5d2715de3f2b6f0718952e4a/a/5dc6b93330fd4c22394277c1/w420"}}}},{"id":"5d2718bd3f2b6f0718952e55","slug":"review-3","status":"published","createdAt":"2019-07-11T11:08:45.076Z","updatedAt":"2019-11-09T13:06:53.576Z","title":"Now this is what I've been waiting for","fields":{"quote":"Now this is what I've been waiting for","reviewerName":"Robert Brown","image":{"url":"https://s3-ap-southeast-2.amazonaws.com/com.appyay/e/5d2715de3f2b6f0718952e4a/a/5dc6b9ed30fd4c22394277c6/w420","baseUrl":"https://s3-ap-southeast-2.amazonaws.com/com.appyay/e/5d2715de3f2b6f0718952e4a/a/5dc6b9ed30fd4c22394277c6","originalWidth":547,"sizes":{"w150":"https://s3-ap-southeast-2.amazonaws.com/com.appyay/e/5d2715de3f2b6f0718952e4a/a/5dc6b9ed30fd4c22394277c6/w150","w420":"https://s3-ap-southeast-2.amazonaws.com/com.appyay/e/5d2715de3f2b6f0718952e4a/a/5dc6b9ed30fd4c22394277c6/w420"}}}},{"id":"5d2718bd3f2b6f0718952e56","slug":"review-4","status":"published","createdAt":"2019-07-11T11:08:45.079Z","updatedAt":"2019-11-09T13:08:51.481Z","title":"No, your eyes aren't decieving you","fields":{"quote":"No, your eyes aren't decieving you","reviewerName":"Jamie Williams","image":{"url":"https://s3-ap-southeast-2.amazonaws.com/com.appyay/e/5d2715de3f2b6f0718952e4a/a/5dc6ba6330fd4c22394277cb/w420","baseUrl":"https://s3-ap-southeast-2.amazonaws.com/com.appyay/e/5d2715de3f2b6f0718952e4a/a/5dc6ba6330fd4c22394277cb","originalWidth":468,"sizes":{"w150":"https://s3-ap-southeast-2.amazonaws.com/com.appyay/e/5d2715de3f2b6f0718952e4a/a/5dc6ba6330fd4c22394277cb/w150","w420":"https://s3-ap-southeast-2.amazonaws.com/com.appyay/e/5d2715de3f2b6f0718952e4a/a/5dc6ba6330fd4c22394277cb/w420"}}}}],"contentType":{"id":"5d2718bd3f2b6f0718952e52","name":"Review","pluralName":"Reviews","description":"Reviews of the App.","environment":"5d2715de3f2b6f0718952e4a","category":"entity","createdAt":"2019-07-11T11:08:45.063Z","updatedAt":"2019-07-11T11:08:45.094Z"}},"documentation":{"id":"5d2718bd3f2b6f0718952e58","slug":"documentation","status":"published","createdAt":"2019-07-11T11:08:45.121Z","updatedAt":"2019-11-10T16:06:50.027Z","title":"Untitled","fields":{"body":"<p>This is a starter project for the <a href=\"https://github.com/appyay/jen\" target=\"_blank\">Jen static website generator</a>. Jen is a lightweight Javascript library for rapid development of static websites. It was built with a focus on ease of use for developers and to work seamlessly with headless content management systems.</p><p>Jen was originally built to make putting a static website together from an existing HTML template an easy and intuitive process.</p><p>Jen&nbsp;Starter&nbsp;includes&nbsp;a&nbsp;set&nbsp;of&nbsp;features&nbsp;to&nbsp;get&nbsp;you&nbsp;started,&nbsp;including:</p><ul><li>Page&nbsp;templating&nbsp;(using&nbsp;Nunjucks)</li><li>Sass preprocessing</li><li>CSS concatenation and minification</li><li>Javascript concatenation and uglification</li><li>Multi-browser live browser reload</li><li>Master-detail pattern</li><li>Pagination</li><li>Local&nbsp;data</li><li>Optional&nbsp;content&nbsp;management&nbsp;system&nbsp;(using&nbsp;Appyay&nbsp;Headless&nbsp;CMS)</li><li>Netlify&nbsp;configuration</li><li>A modular, reusable design</li></ul><h2>Getting Started</h2><h3>Clone this repository</h3><pre class=\"ql-syntax\" spellcheck=\"false\">git clone https://github.com/appyay/jen-starter.git\ncd jen-starter\n</pre><p>Or <a href=\"#\" target=\"_blank\">download as a ZIP</a></p><h3>Install 
packages</h3><pre class=\"ql-syntax\" spellcheck=\"false\">npm install\n</pre><h3>Run the development server</h3><pre class=\"ql-syntax\" spellcheck=\"false\">npm run dev\n</pre><p>The website will be viewable at <em>http://localhost:3000</em>. On save of the project, output will be compiled and built to the \"public\" directory and the website will be reloaded.</p><p><br></p><h2>How to use</h2><h3>Loading data</h3><p>Dummy data of reviews, features and documentation is already included in the project. Data can be loaded in three ways:</p><p>Manually add a <em>db.json</em> file to 
the data folder.</p><p>Load remote data by running:</p><pre class=\"ql-syntax\" spellcheck=\"false\">npm load --dataUrl 'http://example.com/api/whatever'\n</pre><p>Load remote data and build the project by running:</p><pre class=\"ql-syntax\" spellcheck=\"false\">npm build\n</pre><h3><br></h3><h3>Database</h3><p>The database data for the application is located at <em>data/db.json</em>. This data can be repopulated every time the project builds, so you can have dynamic data if used in combination with static hosting services, webhooks and a headless CMS.</p><p>Data in this file should be in the following format (using \"features\" as an example):</p><pre class=\"ql-syntax\" spellcheck=\"false\">{\n  \"features\": {\n    \"items\": [{\n      \"id\": \"abc123\",\n      ...\n  
                        }
                    ]\n
                }\n
            }\n</pre><p><br></p><h3>Project structure</h3><p>Jen assumes the following project structure:</p><pre class=\"ql-syntax\" spellcheck=\"false\">|--src\n  |--data // required, but folder 
and contents will be generated if supplied a data URL\n    |--db.json //required\n  |--templates //required\n    |--pages //required\n      |--home //This is the homepage folder. Other pages can be added in the same manner\n        |--index.html //required\n|--gulpfile.js // required\n</pre><h3>Creating templates</h3><p><a href=\"https://mozilla.github.io/nunjucks/\" target=\"_blank\">Nunjucks</a> is used for compiling template files to HTML.</p><p>Templates are stored in <em>src/templates</em>. To create a template, create a file in the templates directory with the \".html\" file 
extension.</p><h3>Pages</h3><p>Pages are added as sub-directories of the <em>pages</em> directory 
with an index.html file.</p><h3>Partials</h3><p>Partial files&nbsp;begin&nbsp;with&nbsp;an&nbsp;underscore&nbsp;and&nbsp;encapulate&nbsp;reusable&nbsp;components&nbsp;of&nbsp;a&nbsp;page.</p><h3>Components</h3><p>Component&nbsp;partials&nbsp;are&nbsp;folders&nbsp;that&nbsp;can&nbsp;encapsulate&nbsp;the&nbsp;HTML,&nbsp;Javascript&nbsp;and&nbsp;Sass&nbsp;files&nbsp;for&nbsp;a&nbsp;particular&nbsp;section&nbsp;of&nbsp;a&nbsp;page. The&nbsp;home&nbsp;folder&nbsp;(home&nbsp;page)&nbsp;contains&nbsp;two&nbsp;examples&nbsp;of&nbsp;partial&nbsp;components:&nbsp;</p><p>landing&nbsp;and&nbsp;reviews.</p><h3>Partial templates</h3><p>Partial&nbsp;templates&nbsp;are&nbsp;HTML&nbsp;files&nbsp;that&nbsp;are&nbsp;preceded&nbsp;with&nbsp;an&nbsp;underscore and are defined with Nunjucks blocks:</p><pre class=\"ql-syntax\" spellcheck=\"false\">{% block greeting %}\n&lt;h2&gt;Hi&lt;/h2&gt;\n{% endblock %}\n</pre><p>The partial can then be used in your page like so:</p><pre class=\"ql-syntax\" spellcheck=\"false\">{% block hello %}{% endblock %}\n</pre><h3>Layout templates</h3><p>The&nbsp;header&nbsp;and&nbsp;footer&nbsp;are&nbsp;included&nbsp;on&nbsp;each&nbsp;page&nbsp;through&nbsp;a&nbsp;Nunjucks&nbsp;include:</p><pre class=\"ql-syntax\" spellcheck=\"false\">{% include \"layout/_header.html\" %}\n</pre><h3>Frontmatter</h3><p>The <em>page</em> object provides metadata 
about the page. It should be set at the top of every page HTML template:</p><pre class=\"ql-syntax\" spellcheck=\"false\">{% set page = {\nname: 'home', // page name\ntitle: 'Home' // title of page\n} %}\n</pre><p>This&nbsp;object&nbsp;is&nbsp;used&nbsp;in&nbsp;the&nbsp;layout&nbsp;templates&nbsp;(_header.html&nbsp;and&nbsp;_footer.html). More properties can be added to this object as needed.</p><h3>Master-detail pattern</h3><p>Jen&nbsp;enables&nbsp;facilitation&nbsp;of&nbsp;the&nbsp;master-detail&nbsp;pattern&nbsp;(i.e.&nbsp;list&nbsp;page&nbsp;and&nbsp;accompanying&nbsp;detail&nbsp;pages&nbsp;for&nbsp;each&nbsp;list&nbsp;item). This is demonstrated in the features page folder:</p><pre class=\"ql-syntax\" spellcheck=\"false\">...\n|--pages\n  ...\n  |--features // page folder\n    |--detail\n      |--index.html // this is your detail page\n    |--index.html //this is your list (master) page\n  ...\n</pre><p>So, if a feature item has an ID of \"abc123\", the detail 
page would be accessible at: <em>http: //localhost:3000/features/abc123</em></p><p>The&nbsp;item&nbsp;for&nbsp;display&nbsp;on&nbsp;the&nbsp;detail&nbsp;page&nbsp;can&nbsp;be&nbsp;accessed&nbsp;through&nbsp;the <em>jen.item</em>&nbsp;variable.</p><h3>List pages</h3><p>The&nbsp;list&nbsp;template&nbsp;will&nbsp;be&nbsp;the <em>index.html </em>file&nbsp;in&nbsp;the&nbsp;root&nbsp;of&nbsp;the&nbsp;page&nbsp;folder.&nbsp;The&nbsp;items&nbsp;to&nbsp;needed&nbsp;to&nbsp;form&nbsp;the&nbsp;list&nbsp;can&nbsp;be&nbsp;accessed&nbsp;through&nbsp;the&nbsp;global <em>jen.db</em> global&nbsp;variable.&nbsp;For&nbsp;example,&nbsp;in&nbsp;your&nbsp;list&nbsp;template:</p><pre class=\"ql-syntax\" spellcheck=\"false\">{%&nbsp;for&nbsp;feature&nbsp;in&nbsp;jen.db.features.items&nbsp;%}\n&nbsp;&nbsp;&lt;h2&gt;{{feature.fields.title}}&lt;/h2&gt;\n{%&nbsp;endfor&nbsp;%}\n</pre><h2>Pagination</h2><p>The&nbsp;following&nbsp;variables&nbsp;will&nbsp;be&nbsp;available&nbsp;in&nbsp;list&nbsp;templates&nbsp;for&nbsp;facilitating&nbsp;pagination&nbsp;of&nbsp;list&nbsp;items:</p><ul><li>jen.pagination.offset</li><li>jen.pagination.currentPage</li><li>jen.pagination.total</li><li>jen.pagination.itemsPerPage</li></ul><p>The&nbsp;default&nbsp;number&nbsp;of&nbsp;items&nbsp;per&nbsp;page&nbsp;is&nbsp;50.&nbsp;To&nbsp;specify&nbsp;another&nbsp;value,&nbsp;pass&nbsp;it&nbsp;into&nbsp;Jen&nbsp;through&nbsp;the&nbsp;options&nbsp;object&nbsp;in <em>gulpfile.js:</em></p><pre class=\"ql-syntax\" spellcheck=\"false\">const&nbsp;itemsPerPage&nbsp;=&nbsp;20;\nrequire('@richjava/jen')(gulp,&nbsp;{\n&nbsp;&nbsp;itemsPerPage:&nbsp;itemsPerPage\n});\n</pre><p>In&nbsp;your&nbsp;list&nbsp;template,&nbsp;you&nbsp;can&nbsp;loop&nbsp;through&nbsp;items&nbsp;in&nbsp;a&nbsp;range&nbsp;like&nbsp;so:</p><pre class=\"ql-syntax\" spellcheck=\"false\">{%&nbsp;for&nbsp;i&nbsp;in&nbsp;range(jen.pagination.offset,&nbsp;jen.pagination.offset&nbsp;+&nbsp;jen.pagination.itemsPerPage&nbsp;)&nbsp;%}\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;h2&gt;{{jen.db.features.items[i].fields.title}}&lt;/h2&gt;\n{%&nbsp;endfor&nbsp;%}\n</pre><p>This project also includes a Bootstrap pagination component in the 
components directory of the templates folder. More components can be added in the same manner (using Nunjucks macros).</p><h2>Assets</h2><h3>Sass</h3><p>Sass files are stored in the <em>src/assets/scss/</em> directory and in the root of page directories. The root Sass file is <em>src/assets/scss/index.scss.</em></p><p>Sass&nbsp;files&nbsp;kept&nbsp;at&nbsp;a&nbsp;component&nbsp;level&nbsp;(in&nbsp;the&nbsp;templates&nbsp;directory)&nbsp;are&nbsp;automatically&nbsp;compiled&nbsp;and&nbsp;are&nbsp;imported&nbsp;into&nbsp;the&nbsp;main&nbsp;Sass&nbsp;file:</p><pre class=\"ql-syntax\" 
spellcheck=\"false\">@import&nbsp;'../../bin/generated/components';\n</pre><p>But note that you won't have control over the source order, so if source order is important to you, you should create 
Sass files in the <em>src/assets/scss</em> directory instead and import them manually into the main Sass (<em>index.scss</em>) file.</p><h3>Javascript</h3><p>Javascript files can be added to the <em>src/assets/js</em> folder and will be concatenated into one file and uglified.</p><h3>Images</h3><p>Images can be added to the <em>src/assets/images</em> folder. This is an example of how to access an image in a template:</p><pre class=\"ql-syntax\" spellcheck=\"false\">&lt;img&nbsp;src=\"{{&nbsp;page.path&nbsp;|&nbsp;path&nbsp;}}images/icons/apple-touch-icon.png\"&nbsp;alt=\"My&nbsp;image\"/&gt;\n</pre>"
        },
        "contentType": {
            "id": "5d2718bd3f2b6f0718952e57",
            "name": "Documentation",
            "pluralName": "Documentation",
            "description": "Jen Starter Documentation",
            "environment": "5d2715de3f2b6f0718952e4a",
            "category": "page",
            "createdAt": "2019-07-11T11:08:45.110Z",
            "updatedAt": "2019-07-11T11:08:45.124Z"
        }
    },
    "meta": {
        "space": {
            "id": "5d2715de3f2b6f0718952e49",
            "name": "Jen Starter",
            "description": "",
            "tagline": null
        }
    }
},
"page": {
    "name": "features-detail",
    "hasScripts": true,
    "pagination": {
        "currentPage": 1,
        "total": 3,
        "itemsPerPage": 50,
        "offset": 0
    },
    "item": {
        "id": "5d2718bd3f2b6f0718952e4f",
        "slug": "modular-architecture",
        "status": "published",
        "createdAt": "2019-07-11T11:08:45.025Z",
        "updatedAt": "2019-07-12T03:20:54.269Z",
        "title": "Modular architecture",
        "fields": {
            "title": "Modular architecture",
            "body":"<p>Jen Starter uses a combination of industry standard technologies to create modular, reusable components.</p><h2>Templating</h2><p>Through the use of template inheritance, we can create child HTML components. In addition to this, we can also use include blocks of HTML into a scope, and this is used 
in Jen Starter for layout components.</p><h2>Modular CSS</h2><p><span style=\"color: rgba(0, 0, 0, 0.84);\">One of the benefits of CSS-in-JS is that it abstracts the CSS model to the component level, rather than the document level. In Jen Starter, modularity of styles is achieved by placing Sass files at component level. CSS won't be scoped to the page as is with CSS-in-JS, but BEM naming 
is used instead to enforce scoping.</span></p><h2><span style=\"color: rgba(0, 0, 0, 0.84);\">Modular Javascript</span></h2><p>You don't need to write any Javascript for Jen Starter to work, but if you do want to use it you can choose to use it globally or at a component level.</p>",
            "image": {
                "url": "https://s3-ap-southeast-2.amazonaws.com/com.appyay/e/5d2715de3f2b6f0718952e4a/a/5d27fc6c3f2b6f0718952e60/w420",
                "baseUrl": "https://s3-ap-southeast-2.amazonaws.com/com.appyay/e/5d2715de3f2b6f0718952e4a/a/5d27fc6c3f2b6f0718952e60",
                "originalWidth": 420,
                "sizes": {
                    "w150": "https://s3-ap-southeast-2.amazonaws.com/com.appyay/e/5d2715de3f2b6f0718952e4a/a/5d27fc6c3f2b6f0718952e60/w150",
                    "w420": "https://s3-ap-southeast-2.amazonaws.com/com.appyay/e/5d2715de3f2b6f0718952e4a/a/5d27fc6c3f2b6f0718952e60/w420"
                }
            }
        }
    }
}
},
"page": {
"name": "docs",
"hasScripts": false
}
}
}